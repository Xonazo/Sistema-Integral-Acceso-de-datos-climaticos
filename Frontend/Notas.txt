/*

primera llamada funcional
https://power.larc.nasa.gov/api/temporal/hourly/point?start=20210101&end=20210331&latitude=40.8742&longitude=-110.3606&community=ag&parameters=T2M&header=true&time-standard=lst

Pagina de las calls 
https://power.larc.nasa.gov/api/pages/?urls.primaryName=Hourly

Parametros de la llamada
https://power.larc.nasa.gov/#resources

Api General
https://power.larc.nasa.gov/docs/services/api/

*/


GEOJSON = .json
CSV = .csv
ASCII =.txt



import { useEffect, useState } from 'react';
import { Inter } from 'next/font/google';

const inter = Inter({ subsets: ['latin'] });

export default function Home() {
  const [downloadLink, setDownloadLink] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch(
          'https://power.larc.nasa.gov/api/temporal/daily/point?start=20230101&end=20240101&latitude=40.8742&longitude=-110.3606&community=ag&parameters=T2M&format=netcdf&header=true&time-standard=lst'
        );

        if (response.ok) {
          const buffer = await response.arrayBuffer();

          // Crear un enlace de descarga
          const blob = new Blob([buffer], { type: 'application/octet-stream' });
          const url = URL.createObjectURL(blob);

          setDownloadLink(url);
        } else {
          console.error('Error al obtener los datos');
        }
      } catch (error) {
        console.error('Error en la solicitud:', error);
      }
    };

    fetchData();
  }, []);

  return (
    <div>
      <h1>xd</h1>

      {downloadLink && (
        <div>
          {/* Agrega un enlace para descargar el archivo */}
          <a href={downloadLink} download="archivo.nc">
            Descargar archivo .nc
          </a>
        </div>
      )}
    </div>
  );
}






Name: Temperature at 10 Meters
Abbreviation: T10M


Name: Temperature at 2 Meters
Abbreviation: T2M


Name: Dew/Frost Point at 2 Meters
Abbreviation: T2MDEW

Name: Wet Bulb Temperature at 2 Meters
Abbreviation: T2MWET

Name: Earth Skin Temperature
Abbreviation: TS

Name: Temperature at 2 Meters Range
Abbreviation: T2M_RANGE

Name: Temperature at 10 Meters Maximum
Abbreviation: T10M_MAX


Name: Temperature at 10 Meters Minimum
Abbreviation: T10M_MIN

TEMPERATURA
T2MDEW
T2M
TS
T2MWET



precipitacion
PRECTOTCORR,QV2M,RH2M


wind/pressure
PS,WD10M,WS10M,WS50M,WD50M


https://power.larc.nasa.gov/api/temporal/${intervalo}/regional?start=${fechaInicioFormateada}&end=${fechaFinFormateada}&latitude-min=${latitudeMin}&latitude-max=${latitudeMax}&longitude-min=${longitudeMin}&longitude-man=${longitudeMan}&community=${comunidad}&parameters=${parameters}&format=${formato}&header=true&time-standard=lst


import React, { useEffect, useRef } from "react";
import dynamic from "next/dynamic";
import "leaflet/dist/leaflet.css";
import "leaflet/dist/images/marker-icon.png";
import "leaflet/dist/images/marker-shadow.png";

const Map = dynamic(() => import("react-leaflet").then((mod) => mod.Map), {
  ssr: false,
});

const TileLayer = dynamic(() => import("react-leaflet").then((mod) => mod.TileLayer), {
  ssr: false,
});

const MapView = ({ onMapClick }) => {
  const mapRef = useRef(null);
  const rectangleRef = useRef(null);

  useEffect(() => {
    if (typeof window !== "undefined") {
      const L = require("leaflet");
      if (!mapRef.current) {
        mapRef.current = L.map("map", {
          center: [-36.8225012, -73.0132711],
          zoom: 10,
          minZoom: 2,
          maxZoom: 17,
        });

        const Esri_WorldStreetMap = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}', {
          attribution: 'Tiles &copy; Esri &mdash; Source: Esri, DeLorme, NAVTEQ, USGS, Intermap, iPC, NRCAN, Esri Japan, METI, Esri China (Hong Kong), Esri (Thailand), TomTom, 2012'
        });

        mapRef.current.addLayer(Esri_WorldStreetMap);

        const LeafletGeosearch = require("leaflet-geosearch");

        const searchControl = new LeafletGeosearch.GeoSearchControl({
          provider: new LeafletGeosearch.OpenStreetMapProvider(),
          style: 'bar',
          showMarker: false,
          showPopup: false,
          autoClose: true,
          retainZoomLevel: false,
          animateZoom: true,
          searchLabel: 'Ingrese dirección',
        });

        mapRef.current.addControl(searchControl);

        mapRef.current.on("click", handleMapClick);

        mapRef.current.on("move", () => {
          const bounds = mapRef.current.getBounds();
          const maxLat = 85.0511;
          const minLat = -85.0511;

          if (bounds.getNorth() > maxLat) {
            mapRef.current.panBy([0, bounds.getNorth() - maxLat], { animate: false });
          } else if (bounds.getSouth() < minLat) {
            mapRef.current.panBy([0, bounds.getSouth() - minLat], { animate: false });
          }
        });
      }
    }

    return () => {
      if (mapRef.current) {
        mapRef.current.remove();
        mapRef.current = null; 
      }
    };
  }, []);

  const handleMapClick = (e) => {
    const { lat, lng } = e.latlng;
    console.log(`Latitud: ${lat}, Longitud: ${lng}`);
    if (onMapClick) {
      onMapClick(lat, lng);
      if (rectangleRef.current) {
        mapRef.current.removeLayer(rectangleRef.current);
      }
      const bounds = [[lat - 0.1, lng - 0.1], [lat + 0.1, lng + 0.1]]; // Ajusta los límites del rectángulo según tus necesidades
      rectangleRef.current = L.rectangle(bounds, { color: "#ff7800", weight: 1 }).addTo(mapRef.current);
      
      // Obtener las coordenadas de las esquinas del rectángulo
      const southWest = rectangleRef.current.getBounds().getSouthWest();
      const northEast = rectangleRef.current.getBounds().getNorthEast();
      console.log("Latitud inferior izquierda:", southWest.lat, "Longitud inferior izquierda:", southWest.lng);
      console.log("Latitud superior derecha:", northEast.lat, "Longitud superior derecha:", northEast.lng);
    }
  };

  return (
    <div id="map" style={{ height: "100vh", width: "100%" }}>
      <Map center={[-36.8225012, -73.0132711]} zoom={13} minZoom={5} maxZoom={15}>
        <TileLayer
          url="https://maps.wikimedia.org/osm-intl/{z}/{x}/{y}.png"
          attribution='<a href="https://wikimediafoundation.org/wiki/Maps_Terms_of_Use">Wikimedia</a>'
          wrap={true}
        />
      </Map>
    </div>
  );
};

export default MapView;
